package com.function.ianchang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.function.ianchang.simplegreendao.ScheduleInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCHEDULE_INFO".
*/
public class ScheduleInfoDao extends AbstractDao<ScheduleInfo, Long> {

    public static final String TABLENAME = "SCHEDULE_INFO";

    /**
     * Properties of entity ScheduleInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property StartDate = new Property(1, java.util.Date.class, "startDate", false, "START_DATE");
        public final static Property EndDate = new Property(2, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property ActivityCode = new Property(3, String.class, "activityCode", false, "ACTIVITY_CODE");
    }


    public ScheduleInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"START_DATE\" INTEGER NOT NULL UNIQUE ," + // 1: startDate
                "\"END_DATE\" INTEGER NOT NULL ," + // 2: endDate
                "\"ACTIVITY_CODE\" TEXT NOT NULL );"); // 3: activityCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScheduleInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getStartDate().getTime());
        stmt.bindLong(3, entity.getEndDate().getTime());
        stmt.bindString(4, entity.getActivityCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScheduleInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getStartDate().getTime());
        stmt.bindLong(3, entity.getEndDate().getTime());
        stmt.bindString(4, entity.getActivityCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ScheduleInfo readEntity(Cursor cursor, int offset) {
        ScheduleInfo entity = new ScheduleInfo( //
            cursor.getLong(offset + 0), // id
            new java.util.Date(cursor.getLong(offset + 1)), // startDate
            new java.util.Date(cursor.getLong(offset + 2)), // endDate
            cursor.getString(offset + 3) // activityCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScheduleInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setStartDate(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setEndDate(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setActivityCode(cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScheduleInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScheduleInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScheduleInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
