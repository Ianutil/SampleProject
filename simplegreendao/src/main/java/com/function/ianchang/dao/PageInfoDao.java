package com.function.ianchang.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.function.ianchang.simplegreendao.PageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAGE_INFO".
*/
public class PageInfoDao extends AbstractDao<PageInfo, Void> {

    public static final String TABLENAME = "PAGE_INFO";

    /**
     * Properties of entity PageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ActivityCode = new Property(0, String.class, "activityCode", false, "ACTIVITY_CODE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property PlayTime = new Property(2, long.class, "playTime", false, "PLAY_TIME");
    }


    public PageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public PageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAGE_INFO\" (" + //
                "\"ACTIVITY_CODE\" TEXT NOT NULL ," + // 0: activityCode
                "\"NAME\" TEXT," + // 1: name
                "\"PLAY_TIME\" INTEGER NOT NULL );"); // 2: playTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PageInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getActivityCode());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getPlayTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PageInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getActivityCode());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getPlayTime());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public PageInfo readEntity(Cursor cursor, int offset) {
        PageInfo entity = new PageInfo( //
            cursor.getString(offset + 0), // activityCode
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getLong(offset + 2) // playTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PageInfo entity, int offset) {
        entity.setActivityCode(cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlayTime(cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(PageInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(PageInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(PageInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
